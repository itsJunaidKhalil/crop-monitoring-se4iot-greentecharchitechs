[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ea24d4b37f03776f",
        "type": "tab",
        "label": "Field 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "80401ace8313dd5d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "host.docker.internal",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c031444e6e0e8eb8",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": 8086,
        "protocol": "http",
        "database": "crop_monitoring",
        "name": "sensor_data",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "70ee48016740a32c",
        "type": "influxdb",
        "hostname": "https://us-west-2-1.aws.cloud2.influxdata.com",
        "port": "",
        "protocol": "http",
        "database": "database",
        "name": "soil_moisture",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://us-east-1-1.aws.cloud2.influxdata.com",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "68ffafefe449d1f8",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": 8086,
        "protocol": "http",
        "database": "crop_monitoring",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "2d90dea11174e274",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "Influxdb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://host.docker.internal:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "8516d67016050e5d",
        "type": "telegram client config",
        "botname": "@crop_alert_bot",
        "verboselogging": false,
        "loginmode": "bot",
        "useproxy": false,
        "usewss": false,
        "devicemodel": "",
        "systemversion": "",
        "appversion": "",
        "host": "",
        "sockstype": "5",
        "port": "6667",
        "username": "anonymous",
        "password": "",
        "secret": "",
        "mtproxy": false,
        "timeout": "2"
    },
    {
        "id": "36205cab2c343fde",
        "type": "telegram bot",
        "botname": "crop-monitoring-alerts",
        "usernames": "",
        "chatids": "-1002413095727",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "d562954ba12bb2ec",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "/home/test1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "80401ace8313dd5d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 560,
        "wires": [
            [
                "6e944fa4ca48d362",
                "aa75a27ca84a6f4e"
            ]
        ]
    },
    {
        "id": "aa75a27ca84a6f4e",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 560,
        "wires": []
    },
    {
        "id": "ce21562cf5514e48",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 480,
        "wires": [
            [
                "d16e5c878ba6dbd3"
            ]
        ]
    },
    {
        "id": "4ed1a5469a06a57c",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "/home/test1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "80401ace8313dd5d",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "d16e5c878ba6dbd3",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "function 1",
        "func": "msg.payload = 12.5\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 480,
        "wires": [
            [
                "4ed1a5469a06a57c"
            ]
        ]
    },
    {
        "id": "6e944fa4ca48d362",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "function 2",
        "func": "let value = msg.payload; // Sensor value (e.g., 45)\nlet test = [{\n    measurement: \"soil_moisture\", // Name of the measurement\n    fields: {\n        value: value // Data fields (e.g., sensor value)\n    },\n    tags: {\n        location: \"Field 1\" // Optional metadata\n    },\n    timestamp: new Date().getTime() // Optional timestamp\n}];\n\nmsg.payload = test;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 640,
        "wires": [
            [
                "fc687e7512d806c5"
            ]
        ]
    },
    {
        "id": "fc687e7512d806c5",
        "type": "influxdb batch",
        "z": "f6f2187d.f17ca8",
        "influxdb": "2d90dea11174e274",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "univaq",
        "bucket": "se4iot",
        "x": 640,
        "y": 640,
        "wires": []
    },
    {
        "id": "e34e1c536df5eca9",
        "type": "mqtt in",
        "z": "ea24d4b37f03776f",
        "name": "",
        "topic": "/crop/field1/soil_moisture",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "80401ace8313dd5d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 160,
        "wires": [
            [
                "2687264c716070c7",
                "88bcee632d429c06",
                "50bce2b864c82ccf"
            ]
        ]
    },
    {
        "id": "04ed548d9a8dfee7",
        "type": "inject",
        "z": "ea24d4b37f03776f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 100,
        "wires": [
            [
                "d00bbb4d230dafb0"
            ]
        ]
    },
    {
        "id": "757935380328c72d",
        "type": "mqtt out",
        "z": "ea24d4b37f03776f",
        "name": "",
        "topic": "/crop/field1/soil_moisture",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "80401ace8313dd5d",
        "x": 1010,
        "y": 100,
        "wires": []
    },
    {
        "id": "d00bbb4d230dafb0",
        "type": "function",
        "z": "ea24d4b37f03776f",
        "name": "soil_moisture",
        "func": "msg.topic = \"/crop/field1/soil_moisture\";\nmsg.payload = {\n    sensor: \"Soil-\" + Math.floor(Math.random() * (100 - 1 + 1) + 1),\n    location: \"s\"+ Math.floor(Math.random() * (3 - 1 + 1) + 1),\n    value: Math.floor(Math.random() * (70 - 10 + 1)) + 10, // Generate random moisture %\n    timestamp: new Date().toISOString()\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 100,
        "wires": [
            [
                "757935380328c72d"
            ]
        ]
    },
    {
        "id": "2687264c716070c7",
        "type": "debug",
        "z": "ea24d4b37f03776f",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 160,
        "wires": []
    },
    {
        "id": "88bcee632d429c06",
        "type": "function",
        "z": "ea24d4b37f03776f",
        "name": "soil_moisture",
        "func": "\nlet data = msg.payload; // Sensor value (e.g., 45)\nlet test = [{\n    measurement: \"soil_moisture\", // Name of the measurement\n    fields: {\n        value: data.value // Data fields (e.g., sensor value)\n    },\n    tags: {\n        location: data.location // Optional metadata\n    },\n    timestamp: new Date().getTime() // Optional timestamp\n}];\n\nmsg.payload = test;\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 220,
        "wires": [
            [
                "34872509727536f4"
            ]
        ]
    },
    {
        "id": "9227c82773e90228",
        "type": "mqtt in",
        "z": "ea24d4b37f03776f",
        "name": "",
        "topic": "/crop/field1/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "80401ace8313dd5d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 320,
        "y": 480,
        "wires": [
            [
                "2359c6061773e604",
                "8ab1e09e38f2d27b",
                "e37a5344816139e8"
            ]
        ]
    },
    {
        "id": "f92baeae7d28c1aa",
        "type": "inject",
        "z": "ea24d4b37f03776f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 380,
        "wires": [
            [
                "1b8942d303afa721"
            ]
        ]
    },
    {
        "id": "0686a6063f53d418",
        "type": "mqtt out",
        "z": "ea24d4b37f03776f",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "80401ace8313dd5d",
        "x": 770,
        "y": 380,
        "wires": []
    },
    {
        "id": "1b8942d303afa721",
        "type": "function",
        "z": "ea24d4b37f03776f",
        "name": "temperature",
        "func": "msg.topic = \"/crop/field1/temperature\";\nmsg.payload = {\n    value: Math.floor(Math.random() * (40 - 15 + 1)) + 15, // Random temperature in Celsius\n    timestamp: new Date().toISOString(),\n    sensor: \"Temperature-\" + Math.floor(Math.random() * (100 - 1 + 1) + 1),\n    location: \"s\" + Math.floor(Math.random() * (3 - 1 + 1) + 1),\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 380,
        "wires": [
            [
                "0686a6063f53d418"
            ]
        ]
    },
    {
        "id": "e37a5344816139e8",
        "type": "debug",
        "z": "ea24d4b37f03776f",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 460,
        "wires": []
    },
    {
        "id": "2359c6061773e604",
        "type": "function",
        "z": "ea24d4b37f03776f",
        "name": "temperature",
        "func": "\nlet data = msg.payload; // Sensor value (e.g., 45)\nlet test = [{\n    measurement: \"temperature\", // Name of the measurement\n    fields: {\n        value: data.value // Data fields (e.g., sensor value)\n    },\n    tags: {\n        location: data.field\n    },\n    timestamp: new Date().getTime() // Optional timestamp\n}];\n\nmsg.payload = test;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 520,
        "wires": [
            [
                "d62057bebed66227"
            ]
        ]
    },
    {
        "id": "34872509727536f4",
        "type": "influxdb batch",
        "z": "ea24d4b37f03776f",
        "influxdb": "2d90dea11174e274",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxdbsoil",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "univaq",
        "bucket": "se4iot",
        "x": 870,
        "y": 220,
        "wires": []
    },
    {
        "id": "d62057bebed66227",
        "type": "influxdb batch",
        "z": "ea24d4b37f03776f",
        "influxdb": "2d90dea11174e274",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxdbtemp",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "univaq",
        "bucket": "se4iot",
        "x": 830,
        "y": 520,
        "wires": []
    },
    {
        "id": "869f4dfd88aed143",
        "type": "mqtt in",
        "z": "ea24d4b37f03776f",
        "name": "",
        "topic": "/crop/field1/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "80401ace8313dd5d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 760,
        "wires": [
            [
                "dbdc36aa98e8226d",
                "cf1ab3e01c97bd7e",
                "cedd6838b7c5162a"
            ]
        ]
    },
    {
        "id": "76e8c6b3ed8e4864",
        "type": "inject",
        "z": "ea24d4b37f03776f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 660,
        "wires": [
            [
                "fa50dec862ffb88d"
            ]
        ]
    },
    {
        "id": "1471ef73faf24e40",
        "type": "mqtt out",
        "z": "ea24d4b37f03776f",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "80401ace8313dd5d",
        "x": 770,
        "y": 660,
        "wires": []
    },
    {
        "id": "fa50dec862ffb88d",
        "type": "function",
        "z": "ea24d4b37f03776f",
        "name": "humidity",
        "func": "msg.topic = \"/crop/field1/humidity\";\nmsg.payload = {\n    value: Math.floor(Math.random() * (100 - 10 + 1)) + 10, // Random humidity in %\n    timestamp: new Date().toISOString(),\n    sensor: \"Humidity-\" + Math.floor(Math.random() * (100 - 1 + 1) + 1),\n    location: \"s\" + Math.floor(Math.random() * (3 - 1 + 1) + 1),\n};\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 660,
        "wires": [
            [
                "1471ef73faf24e40"
            ]
        ]
    },
    {
        "id": "cedd6838b7c5162a",
        "type": "debug",
        "z": "ea24d4b37f03776f",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 760,
        "wires": []
    },
    {
        "id": "dbdc36aa98e8226d",
        "type": "function",
        "z": "ea24d4b37f03776f",
        "name": "humidity",
        "func": "let data = msg.payload; // Sensor value (e.g., 45)\nlet test = [{\n    measurement: \"humidity\", // Name of the measurement\n    fields: {\n        value: data.value // Data fields (e.g., sensor value)\n    },\n    tags: {\n        location: \"Field 1\" // Optional metadata\n    },\n    timestamp: new Date().getTime() // Optional timestamp\n}];\n\nmsg.payload = test;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 820,
        "wires": [
            [
                "84b56f4edd2f4fc4"
            ]
        ]
    },
    {
        "id": "84b56f4edd2f4fc4",
        "type": "influxdb batch",
        "z": "ea24d4b37f03776f",
        "influxdb": "2d90dea11174e274",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxdbhum",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "univaq",
        "bucket": "se4iot",
        "x": 730,
        "y": 820,
        "wires": []
    },
    {
        "id": "50bce2b864c82ccf",
        "type": "function",
        "z": "ea24d4b37f03776f",
        "name": "Send alert",
        "func": "let data = msg.payload;\nif (data.value < 20){\n    let test = {\n            type: \"message\",\n            chatId: \"-1002413095727\",\n            content: \"Domain: Industrial IoT\\nSensor: \"+data.sensor+\"\\nLocation:\"+data.location+\"\\nCondition:Soil moisture below safe levels. Risk of drought stress\\nValue:\"+data.value\n    };\n\n    msg.payload = test;\n    return msg;\n}\nif (data.value > 60){\n    let test = {\n            type: \"message\",\n            chatId: \"-1002413095727\",\n            content: \"Domain: Industrial IoT\\nSensor: \"+data.sensor+\"\\nLocation:\"+data.location+\"\\nCondition:Soil moisture above safe levels.Risk of waterlogging\\nValue:\"+data.value\n    };\n\n    msg.payload = test;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 300,
        "wires": [
            [
                "91bc9bff80e67022"
            ]
        ]
    },
    {
        "id": "91bc9bff80e67022",
        "type": "telegram sender",
        "z": "ea24d4b37f03776f",
        "name": "crop-monitoring-alerts",
        "bot": "36205cab2c343fde",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1240,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "8ab1e09e38f2d27b",
        "type": "function",
        "z": "ea24d4b37f03776f",
        "name": "Send alert",
        "func": "let data = msg.payload;\nif (data.value > 35){\n    let test = {\n            type: \"message\",\n            chatId: \"-1002413095727\",\n        content: \"Domain: Industrial IoT\\nSensor: \" + data.sensor + \"\\nLocation:\" + data.location +\"\\nCondition:Temperature above safe levels. Risk of heat stress\\nValue:\"+data.value\n    };\n\n    msg.payload = test;\n    return msg;\n}\n\nif (data.value < 10) {\n    let test = {\n        type: \"message\",\n        chatId: \"-1002413095727\",\n        content: \"Domain: Industrial IoT\\nSensor: \" + data.sensor + \"\\nLocation:\" + data.location + \"\\nCondition:Temperature below safe levels. Risk of frost damage)\\nValue:\" + data.value\n    };\n\n    msg.payload = test;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 580,
        "wires": [
            [
                "91bc9bff80e67022"
            ]
        ]
    },
    {
        "id": "cf1ab3e01c97bd7e",
        "type": "function",
        "z": "ea24d4b37f03776f",
        "name": "Send alert",
        "func": "let data = msg.payload;\nif (data.value < 40){\n    let test = {\n            type: \"message\",\n            chatId: \"-1002413095727\",\n            content: \"Domain: Industrial IoT\\nSensor: \"+data.sensor+\"\\nLocation:\"+data.location+\"\\nCondition:Humidity below safe levels\\nValue:\"+data.value\n    };\n\n    msg.payload = test;\n    return msg;\n}\nif (data.value >85 ) {\n    let test = {\n        type: \"message\",\n        chatId: \"-1002413095727\",\n        content: \"Domain: Industrial IoT\\nSensor: \" + data.sensor + \"\\nLocation:\" + data.location + \"\\nCondition:Humidity above safe levels\\nValue:\" + data.value\n    };\n\n    msg.payload = test;\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 900,
        "wires": [
            [
                "91bc9bff80e67022"
            ]
        ]
    }
]